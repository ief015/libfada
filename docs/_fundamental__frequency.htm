<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>libfada: II: Fundamental Frequency</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="libfada-logo-small-fade.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">libfada
   &#160;<span id="projectnumber">0.1</span>
   </div>
   <div id="projectbrief">Free Audio Detection and Analysis Library</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">II: Fundamental Frequency </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Generate an FFT and scan for the fundamental frequency.</p>
<p>In these examples, I'll be using SFML (<a href="http://www.sfml-dev.org/">www.sfml-dev.org</a>) for audio loading and playing, which should help keep these examples simple.</p>
<h1><a class="anchor" id="Fundamental_Frequncy_1"></a>
Part 1 - Introduction to FFT Generation</h1>
<p>The fundamental frequency finder here will generate an FFT in real-time, and scan the resulting data for the frequency most strongest.</p>
<div class="fragment"><div class="line"><span class="comment">/***********************************************************</span></div>
<div class="line"><span class="comment"> ** libfada Fundamental Frequency Finder</span></div>
<div class="line"><span class="comment"> **   Written by Nathan Cousins - December 2013</span></div>
<div class="line"><span class="comment"> ** </span></div>
<div class="line"><span class="comment"> ** Usage: fundfreq &lt;audio_filepath&gt;</span></div>
<div class="line"><span class="comment"> **   `audio_filepath&#39; may be any filetype supported by SFML/libsndfile.</span></div>
<div class="line"><span class="comment"> ***********************************************************/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;SFML/Audio.hpp&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="fada_8hpp.htm">fada/fada.hpp</a>&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Protect data between the main thread and the thread that streams audio.</span></div>
<div class="line">sf::Mutex mutex;</div>
<div class="line"></div>
<div class="line"><span class="comment">// Function that scans the FFT data for the fundamental frequency.</span></div>
<div class="line"><span class="keywordtype">double</span> findFundamentalFreq(<a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>*);</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Extends the sf::Music class which streams and plays audio on a separate thread.</span></div>
<div class="line"><span class="comment">// AudioFileStream will push sample data into the libfada manager as the audio data is streamed.</span></div>
<div class="line"><span class="keyword">class </span>AudioFileStream : <span class="keyword">public</span> sf::Music</div>
<div class="line">{</div>
<div class="line"><span class="keyword">private</span>:</div>
<div class="line"></div>
<div class="line">    <a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* m_fada;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keyword">public</span>:</div>
<div class="line">    </div>
<div class="line">    AudioFileStream(<a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada)</div>
<div class="line">    {</div>
<div class="line">        m_fada = fada;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keyword">protected</span>:</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Called when seeking audio.</span></div>
<div class="line">    <span class="keyword">virtual</span> <span class="keywordtype">void</span> onSeek(sf::Time timeOffset)</div>
<div class="line">    {</div>
<div class="line">        sf::Lock lock(mutex);</div>
<div class="line"></div>
<div class="line">        sf::Music::onSeek(timeOffset);</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Clear all audio data, since we&#39;re going to recieve new audio elsewhere in the audio file.</span></div>
<div class="line">        <a class="code" href="fada_8h.htm#ac0edce493d8599d5e5af1e4def1423c1">fada_freechunks</a>(m_fada);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Called when SFML loads a new chunk of audio data.</span></div>
<div class="line">    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> onGetData(sf::SoundStream::Chunk&amp; chunk)</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordflow">if</span> (sf::Music::onGetData(chunk))</div>
<div class="line">        {</div>
<div class="line">            sf::Lock lock(mutex);</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Push samples to the manager.</span></div>
<div class="line">            <span class="comment">// Copy the data, because SFML doesn&#39;t hang on to the chunk data.</span></div>
<div class="line">            <span class="keywordflow">if</span> (<a class="code" href="fada_8h.htm#a217ceb570e1a8b1fb7fe4541521a166c">fada_pushsamples</a>(m_fada, (<span class="keywordtype">void</span>*)chunk.samples, chunk.sampleCount, <a class="code" href="fada__def_8h.htm#ad0dcc2bfec28c61784e387bb7897f26d">FADA_TRUE</a>) != <a class="code" href="fada__def_8h.htm#a87016571076212df1904f2dc40f09259">FADA_ERROR_SUCCESS</a>)</div>
<div class="line">            {</div>
<div class="line">                std::cerr &lt;&lt; <span class="stringliteral">&quot;Could not push &quot;</span> &lt;&lt; chunk.sampleCount &lt;&lt; <span class="stringliteral">&quot; samples!&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">            }</div>
<div class="line"></div>
<div class="line">            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">};</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* args[])</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada = <a class="code" href="fada_8h.htm#a457ff5d334c3179cab9cf8fb5cd484ec">fada_newmanager</a>();</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    std::string filename = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line">    <span class="keywordflow">if</span> (argc &gt; 1)</div>
<div class="line">        filename = args[1];</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    AudioFileStream audio(fada);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">if</span> (!audio.openFromFile(filename))</div>
<div class="line">    {</div>
<div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem opening audio file.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">return</span> 1;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Tell the manager what kind of audio data it&#39;s going to recieve.</span></div>
<div class="line">    <span class="comment">// SFML uses Int16 for audio.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#aaa4673d72241e7b63c1cb1a9ded7be5d">fada_bindstream</a>(fada, FADA_TSAMPLE_INT16, audio.getSampleRate(), audio.getChannelCount());</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Commented, because the default window size is already 1024.</span></div>
<div class="line">    <span class="comment">// If we wanted to change the size of the analysis window, we could do it here.</span></div>
<div class="line"><span class="comment">//  fada_setwindowframes(fada, 1024);</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Preload the internal FFT buffer. That&#39;s where generated FFT data is stored.</span></div>
<div class="line">    <span class="comment">// If we wanted more than one FFT buffer or to specify how large the FFT buffer is, that&#39;s where external FFT buffers (fada_FFTBuffer type) come in handy.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#a20dcd70dff3ccd1fe86a44f775d7653a">fada_preloadfftbuffer</a>(fada);</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Update every 1024 samples.</span></div>
<div class="line">    sf::Time continueInterval = sf::seconds(1024.f / audio.getSampleRate());</div>
<div class="line">    sf::Time nextContinue = continueInterval;</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">bool</span> readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    audio.play();</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">while</span> (audio.getStatus() == AudioFileStream::Playing)</div>
<div class="line">    {</div>
<div class="line">        sf::Lock lock(mutex);</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">if</span> (readyToUpdate)</div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// Generate the FFT.</span></div>
<div class="line">            <span class="comment">// See findFundamentalFreq() to see how we extract the FFT data.</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#a7e3e4395ab2e1504bc2aea1b6d2e1a38">fada_calcfft</a>(fada);</div>
<div class="line"></div>
<div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Fundamental Frequency: &quot;</span> &lt;&lt; findFundamentalFreq(fada) &lt;&lt; <span class="stringliteral">&quot;Hz&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">false</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">while</span> (audio.getPlayingOffset() &gt;= nextContinue)</div>
<div class="line">        {</div>
<div class="line">            nextContinue += continueInterval;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Advance to the next window of audio data.</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#a57a3133da6f3c2d2bf49057d29435817">fada_continue</a>(fada, <a class="code" href="fada__def_8h.htm#a2201bcba05e79aee7b99abf2023d7475">FADA_NEXT_WINDOW</a>);</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line">        }</div>
<div class="line">        </div>
<div class="line">        sf::sleep(sf::milliseconds(1));</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Finished with the manager.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#afa62b224b1991b735d3a8e6b9dc2b0f1">fada_closemanager</a>(fada);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line"></div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">double</span> findFundamentalFreq(<a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada)</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">double</span> high = 0.;</div>
<div class="line">    <span class="keywordtype">size_t</span> fundamental = 0;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Find index with highest value.</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0, sz = (<a class="code" href="fada_8h.htm#af2d8e49b3f14bc94061b5dc94d354cad">fada_getfftsize</a>(fada) / 2); i &lt; sz; ++i)</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">double</span> cur;</div>
<div class="line">        <a class="code" href="fada_8h.htm#a003696d2669c8700e30070fa1d294b7a">fada_getfftvalue</a>(fada, i, &amp;cur);</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">if</span> (cur &gt; high)</div>
<div class="line">        {</div>
<div class="line">            high = cur;</div>
<div class="line">            fundamental = i;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> fundamental * (<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<a class="code" href="fada_8h.htm#af8d2b3e844559423e56c9b917f28cbf3">fada_getsamplerate</a>(fada)) / (<a class="code" href="fada_8h.htm#af2d8e49b3f14bc94061b5dc94d354cad">fada_getfftsize</a>(fada) / 2));</div>
<div class="line"></div>
<div class="line">}</div>
</div><!-- fragment --><p>The output, as the music plays, keeps us up to date on the fundamental frequency:</p>
<div class="image">
<img src="fundamental.png" alt="fundamental.png"/>
</div>
<p>Cool, it works nicely! However, there's a noticable problem - there's a lot of repeating values. This is due to the fada_Manager's internal FFT buffer's limited size, which is automatically determined by the manager's analysis window size. In the next example, we ditch the idea of the manager housing the FFT buffer internally, and we create our own larger external FFT buffer.</p>
<h1><a class="anchor" id="Fundamental_Frequncy_2"></a>
Part 2 - External FFT Buffers</h1>
<p>In this modification, we create our own external FFT buffer, and assign it to the manager.</p>
<div class="fragment"><div class="line"><span class="comment">// ...</span></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* args[])</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada = <a class="code" href="fada_8h.htm#a457ff5d334c3179cab9cf8fb5cd484ec">fada_newmanager</a>();</div>
<div class="line">    <a class="code" href="fada__def_8h.htm#ad4f59d96acb6e7c8b73b6006d5eab865">fada_FFTBuffer</a>* fft;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    std::string filename = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line">    <span class="keywordflow">if</span> (argc &gt; 1)</div>
<div class="line">        filename = args[1];</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    AudioFileStream audio(fada);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">if</span> (!audio.openFromFile(filename))</div>
<div class="line">    {</div>
<div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem opening audio file.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">return</span> 1;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Tell the manager what kind of audio data it&#39;s going to recieve.</span></div>
<div class="line">    <span class="comment">// SFML uses Int16 for audio.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#aaa4673d72241e7b63c1cb1a9ded7be5d">fada_bindstream</a>(fada, FADA_TSAMPLE_INT16, audio.getSampleRate(), audio.getChannelCount());</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Commented, because the default window size is already 1024.</span></div>
<div class="line">    <span class="comment">// If we wanted to change the size of the analysis window, we could do it here.</span></div>
<div class="line"><span class="comment">//  fada_setwindowframes(fada, 1024);</span></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create the FFT buffer.</span></div>
<div class="line">    <span class="comment">// Size should be a power of two.</span></div>
<div class="line">    fft = <a class="code" href="fada_8h.htm#aa35526a06aefb9486546e94266813351">fada_newfftbuffer</a>(8192);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Assign our FFT buffer to the manager.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#a79ca8f218c7069e1b5eb2789350e97ff">fada_usefftbuffer</a>(fada, fft);</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Update every 1024 samples.</span></div>
<div class="line">    sf::Time continueInterval = sf::seconds(1024.f / audio.getSampleRate());</div>
<div class="line">    sf::Time nextContinue = continueInterval;</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">bool</span> readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    audio.play();</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">while</span> (audio.getStatus() == AudioFileStream::Playing)</div>
<div class="line">    {</div>
<div class="line">        sf::Lock lock(mutex);</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">if</span> (readyToUpdate)</div>
<div class="line">        {</div>
<div class="line">            <span class="comment">// Generate the FFT.</span></div>
<div class="line">            <span class="comment">// See findFundamentalFreq() to see how we extract the FFT data.</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#a7e3e4395ab2e1504bc2aea1b6d2e1a38">fada_calcfft</a>(fada);</div>
<div class="line"></div>
<div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;Fundamental Frequency: &quot;</span> &lt;&lt; findFundamentalFreq(fada) &lt;&lt; <span class="stringliteral">&quot;Hz&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">false</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">while</span> (audio.getPlayingOffset() &gt;= nextContinue)</div>
<div class="line">        {</div>
<div class="line">            nextContinue += continueInterval;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Advance to the next window of audio data.</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#a57a3133da6f3c2d2bf49057d29435817">fada_continue</a>(fada, <a class="code" href="fada__def_8h.htm#a2201bcba05e79aee7b99abf2023d7475">FADA_NEXT_WINDOW</a>);</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line">        }</div>
<div class="line">        </div>
<div class="line">        sf::sleep(sf::milliseconds(1));</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Finished with the FFT buffer.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#a3eef79b0cae91c294ac0c27e45f1a046">fada_closefftbuffer</a>(fft);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Unassign the FFT buffer.</span></div>
<div class="line">    <span class="comment">// Not terribly useful here, but if the application were still running, it</span></div>
<div class="line">    <span class="comment">//   would be useful to tell the manager that we&#39;re not using that FFT buffer</span></div>
<div class="line">    <span class="comment">//   anymore, so it wouldn&#39;t attempt to access a buffer that no longer exists.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#a79ca8f218c7069e1b5eb2789350e97ff">fada_usefftbuffer</a>(fada, NULL);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Finished with the manager.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#afa62b224b1991b735d3a8e6b9dc2b0f1">fada_closemanager</a>(fada);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line"></div>
<div class="line">}</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">double</span> findFundamentalFreq(<a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada)</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">double</span> high = 0.;</div>
<div class="line">    <span class="keywordtype">size_t</span> fundamental = 0;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Find index with highest value.</span></div>
<div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0, sz = (<a class="code" href="fada_8h.htm#af2d8e49b3f14bc94061b5dc94d354cad">fada_getfftsize</a>(fada) / 2); i &lt; sz; ++i)</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordtype">double</span> cur;</div>
<div class="line">        <a class="code" href="fada_8h.htm#a003696d2669c8700e30070fa1d294b7a">fada_getfftvalue</a>(fada, i, &amp;cur);</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">if</span> (cur &gt; high)</div>
<div class="line">        {</div>
<div class="line">            high = cur;</div>
<div class="line">            fundamental = i;</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Determining the fundamental frequency becomes more accurate the larger the FFT buffer is.</span></div>
<div class="line">    <span class="comment">// However, of course, as we increase the FFT size, the longer it takes to generate the FFT.</span></div>
<div class="line">    <span class="keywordflow">return</span> fundamental * (<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<a class="code" href="fada_8h.htm#af8d2b3e844559423e56c9b917f28cbf3">fada_getsamplerate</a>(fada)) / (<a class="code" href="fada_8h.htm#af2d8e49b3f14bc94061b5dc94d354cad">fada_getfftsize</a>(fada) / 2));</div>
<div class="line"></div>
<div class="line">}</div>
</div><!-- fragment --><p>The output:</p>
<div class="image">
<img src="fundamental2.png" alt="fundamental2.png"/>
</div>
<p>That looks a bit nicer, not as many repeating frequencies now.</p>
<p>With external FFT buffers, you're able to specify how large they are independent of the manager's analysis window size. You're also able create multiple FFT buffers so you are not limited to the single internal buffer. </p>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Dec 12 2013 18:55:50 for libfada by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
