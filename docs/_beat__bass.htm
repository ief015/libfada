<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>libfada: I: Beat + Bass</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="libfada-logo-small-fade.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">libfada
   &#160;<span id="projectnumber">0.1</span>
   </div>
   <div id="projectbrief">Free Audio Detection and Analysis Library</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">I: Beat + Bass </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>Visualize beat and bass intensity.</p>
<p>In these examples, I'll be using SFML (<a href="http://www.sfml-dev.org/">www.sfml-dev.org</a>) for audio loading and playing, which should help keep these examples simple.</p>
<h1><a class="anchor" id="Beat_Bass_1"></a>
Part 1 - A super simple example.</h1>
<p>The beat/bass visualizer will calculate the intensity of beat and bass in real-time, and display it in the console.</p>
<div class="fragment"><div class="line"><span class="comment">/***********************************************************</span></div>
<div class="line"><span class="comment"> ** libfada Beat and Bass Visualizer</span></div>
<div class="line"><span class="comment"> **   Written by Nathan Cousins - December 2013</span></div>
<div class="line"><span class="comment"> ** </span></div>
<div class="line"><span class="comment"> ** Usage: beatbass &lt;audio_filepath&gt;</span></div>
<div class="line"><span class="comment"> **   `audio_filepath&#39; may be any filetype supported by SFML/libsndfile.</span></div>
<div class="line"><span class="comment"> ***********************************************************/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;SFML/Audio.hpp&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="fada_8hpp.htm">fada/fada.hpp</a>&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* args[])</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create the libfada manager.</span></div>
<div class="line">    <span class="comment">// The libfada manager is responsible for analysing the sample data given to it.</span></div>
<div class="line">    <a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada = <a class="code" href="fada_8h.htm#a457ff5d334c3179cab9cf8fb5cd484ec">fada_newmanager</a>();</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    std::string filename = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line">    <span class="keywordflow">if</span> (argc &gt; 1)</div>
<div class="line">        filename = args[1];</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    sf::Sound audio;</div>
<div class="line">    sf::SoundBuffer audioBuffer;</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Decode all the sample data.</span></div>
<div class="line">    <span class="keywordflow">if</span> (!audioBuffer.loadFromFile(filename))</div>
<div class="line">    {</div>
<div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem opening audio file.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">return</span> 1;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    audio.setBuffer(audioBuffer);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Give the manager the audio data, and what kind of audio data it is.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#aea163636be548965c26340cf461a6171">fada_bindsamples</a>(fada, (<span class="keywordtype">void</span>*)audioBuffer.getSamples(), audioBuffer.getSampleCount(),</div>
<div class="line">        <a class="code" href="fada__def_8h.htm#a9f9bf88fa02654aba10e1d4796a43ede">FADA_FALSE</a>, <span class="comment">// We don&#39;t need to copy the data because the audioBuffer will hold on to it. So let&#39;s reference it instead.</span></div>
<div class="line">        <a class="code" href="fada__def_8h.htm#aa4ea218b6ba4c54ea0f7083cac06b78e">FADA_TSAMPLE_INT16</a>, <span class="comment">// SFML uses Int16 for audio.</span></div>
<div class="line">        audioBuffer.getSampleRate(), audioBuffer.getChannelCount());</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Commented, because the default window size is already 1024.</span></div>
<div class="line">    <span class="comment">// If we wanted to change the size of the analysis window, we could do it here.</span></div>
<div class="line"><span class="comment">//  fada_setwindowframes(fada, 1024);</span></div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Update every 1024 samples.</span></div>
<div class="line">    sf::Time continueInterval = sf::seconds(1024.f / audioBuffer.getSampleRate());</div>
<div class="line">    sf::Time nextContinue = continueInterval;</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">bool</span> readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Play the audio.</span></div>
<div class="line">    audio.play();</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">while</span> (audio.getStatus() == sf::Sound::Playing)</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordflow">if</span> (readyToUpdate)</div>
<div class="line">        {</div>
<div class="line">            <a class="code" href="fada__def_8h.htm#acf00bebc146611add2b43e97439d38e9">fada_Res</a> beat, bass, normal;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// libfada&#39;s analyzation algorithms use raw sample data in their calculations. This means that the results</span></div>
<div class="line">            <span class="comment">//   can vary among different sample data types. The normalizer is used to normalize results so they are</span></div>
<div class="line">            <span class="comment">//   uniform across different sample data types.</span></div>
<div class="line">            normal = <a class="code" href="fada_8h.htm#a9e1764292ba546383346c3d026529b24">fada_getnormalizer</a>(fada);</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Calculate &#39;beat&#39; and &#39;bass&#39;</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#ac178acf698d052b8a5349e07c1204ed6">fada_calcbeat</a>(fada, &amp;beat);</div>
<div class="line">            <a class="code" href="fada_8h.htm#af6612f2ad6240d4cfa46819db05d5fec">fada_calcbass</a>(fada, &amp;bass);</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Normalize the values.</span></div>
<div class="line">            beat /= normal;</div>
<div class="line">            bass /= normal;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Visualize beat/bass.</span></div>
<div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> beatCharCount = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(beat * 500);</div>
<div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bassCharCount = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(bass * 75);</div>
<div class="line">            beatCharCount = (beatCharCount &gt; 50) ? 50 : beatCharCount;</div>
<div class="line">            bassCharCount = (bassCharCount &gt; 50) ? 50 : bassCharCount;</div>
<div class="line"></div>
<div class="line">            std::string beatStr(beatCharCount, <span class="charliteral">&#39;&gt;&#39;</span>);</div>
<div class="line">            std::string bassStr(bassCharCount, <span class="charliteral">&#39;]&#39;</span>);</div>
<div class="line"></div>
<div class="line">            printf(<span class="stringliteral">&quot;%s\n%s\n&quot;</span>, beatStr.c_str(), bassStr.c_str());</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">false</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">while</span> (audio.getPlayingOffset() &gt;= nextContinue)</div>
<div class="line">        {</div>
<div class="line">            nextContinue += continueInterval;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Advance to the next window of audio data.</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#a57a3133da6f3c2d2bf49057d29435817">fada_continue</a>(fada, <a class="code" href="fada__def_8h.htm#a2201bcba05e79aee7b99abf2023d7475">FADA_NEXT_WINDOW</a>);</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        sf::sleep(sf::milliseconds(1));</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Finished with the manager.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#afa62b224b1991b735d3a8e6b9dc2b0f1">fada_closemanager</a>(fada);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line"></div>
<div class="line">}</div>
</div><!-- fragment --><p>The output keeps us up to date on beat and bass intensity:</p>
<div class="image">
<img src="beatbass.png" alt="beatbass.png"/>
</div>
<p>However, there's a bit of a problem with loading the entire audio file at once. Though it may be fine with small audio files, large audio files loaded entirely at one time can consume a lot of memory and have a severe impact on loading times.</p>
<p>In the next example, we will modify this code by implementing audio streaming, which will keep the memory footprint small, and significantly boost loading times.</p>
<h1><a class="anchor" id="Beat_Bass_2"></a>
Part 2 - Audio Streaming</h1>
<p>In this modification of the previous code, we create a class that streams audio samples to the manager as audio is loaded by SFML.</p>
<div class="fragment"><div class="line"><span class="comment">/***********************************************************</span></div>
<div class="line"><span class="comment"> ** libfada Beat and Bass Visualizer</span></div>
<div class="line"><span class="comment"> **   Written by Nathan Cousins - December 2013</span></div>
<div class="line"><span class="comment"> ** </span></div>
<div class="line"><span class="comment"> ** Usage: beatbass &lt;audio_filepath&gt;</span></div>
<div class="line"><span class="comment"> **   `audio_filepath&#39; may be any filetype supported by SFML/libsndfile.</span></div>
<div class="line"><span class="comment"> ***********************************************************/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;SFML/Audio.hpp&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="fada_8hpp.htm">fada/fada.hpp</a>&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Protect data between the main thread and the thread that streams audio.</span></div>
<div class="line">sf::Mutex mutex;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">// Extends the sf::Music class which streams and plays audio on a separate thread.</span></div>
<div class="line"><span class="comment">// AudioFileStream will push sample data into the libfada manager as the audio data is streamed.</span></div>
<div class="line"><span class="keyword">class </span>AudioFileStream : <span class="keyword">public</span> sf::Music</div>
<div class="line">{</div>
<div class="line"><span class="keyword">private</span>:</div>
<div class="line"></div>
<div class="line">    <a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* m_fada;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keyword">public</span>:</div>
<div class="line">    </div>
<div class="line">    AudioFileStream(<a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada)</div>
<div class="line">    {</div>
<div class="line">        m_fada = fada;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keyword">protected</span>:</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Called when seeking audio.</span></div>
<div class="line">    <span class="keyword">virtual</span> <span class="keywordtype">void</span> onSeek(sf::Time timeOffset)</div>
<div class="line">    {</div>
<div class="line">        sf::Lock lock(mutex);</div>
<div class="line"></div>
<div class="line">        sf::Music::onSeek(timeOffset);</div>
<div class="line"></div>
<div class="line">        <span class="comment">// Clear all audio data, since we&#39;re going to recieve new audio elsewhere in the audio file.</span></div>
<div class="line">        <a class="code" href="fada_8h.htm#ac0edce493d8599d5e5af1e4def1423c1">fada_freechunks</a>(m_fada);</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Called when SFML loads a new chunk of audio data.</span></div>
<div class="line">    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> onGetData(sf::SoundStream::Chunk&amp; chunk)</div>
<div class="line">    {</div>
<div class="line">        <span class="keywordflow">if</span> (sf::Music::onGetData(chunk))</div>
<div class="line">        {</div>
<div class="line">            sf::Lock lock(mutex);</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Push samples to the manager.</span></div>
<div class="line">            <span class="comment">// Copy the data, because SFML doesn&#39;t hang on to the chunk data.</span></div>
<div class="line">            <span class="keywordflow">if</span> (<a class="code" href="fada_8h.htm#a217ceb570e1a8b1fb7fe4541521a166c">fada_pushsamples</a>(m_fada, (<span class="keywordtype">void</span>*)chunk.samples, chunk.sampleCount, <a class="code" href="fada__def_8h.htm#ad0dcc2bfec28c61784e387bb7897f26d">FADA_TRUE</a>) != <a class="code" href="fada__def_8h.htm#a87016571076212df1904f2dc40f09259">FADA_ERROR_SUCCESS</a>)</div>
<div class="line">            {</div>
<div class="line">                std::cerr &lt;&lt; <span class="stringliteral">&quot;Could not push &quot;</span> &lt;&lt; chunk.sampleCount &lt;&lt; <span class="stringliteral">&quot; samples!&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">            }</div>
<div class="line"></div>
<div class="line">            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">};</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* args[])</div>
<div class="line">{</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Create the libfada manager.</span></div>
<div class="line">    <span class="comment">// The libfada manager is responsible for analysing the sample data given to it.</span></div>
<div class="line">    <a class="code" href="fada__def_8h.htm#ae0b2415293fb7326090ce846d78979e4">fada_Manager</a>* fada = <a class="code" href="fada_8h.htm#a457ff5d334c3179cab9cf8fb5cd484ec">fada_newmanager</a>();</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    std::string filename = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line">    <span class="keywordflow">if</span> (argc &gt; 1)</div>
<div class="line">        filename = args[1];</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    AudioFileStream audio(fada);</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Open the file for streaming.</span></div>
<div class="line">    <span class="comment">// In SFML, audio data isn&#39;t streamed until it is told to play audio.</span></div>
<div class="line">    <span class="keywordflow">if</span> (!audio.openFromFile(filename))</div>
<div class="line">    {</div>
<div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem opening audio file.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">        <span class="keywordflow">return</span> 1;</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Tell the manager what kind of audio data it&#39;s going to recieve.</span></div>
<div class="line">    <span class="comment">// SFML uses Int16 for audio.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#aaa4673d72241e7b63c1cb1a9ded7be5d">fada_bindstream</a>(fada, FADA_TSAMPLE_INT16, audio.getSampleRate(), audio.getChannelCount());</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Commented, because the default window size is already 1024.</span></div>
<div class="line">    <span class="comment">// If we wanted to change the size of the analysis window, we could do it here.</span></div>
<div class="line"><span class="comment">//  fada_setwindowframes(fada, 1024);</span></div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Update every 1024 samples.</span></div>
<div class="line">    sf::Time continueInterval = sf::seconds(1024.f / audio.getSampleRate());</div>
<div class="line">    sf::Time nextContinue = continueInterval;</div>
<div class="line"></div>
<div class="line">    <span class="keywordtype">bool</span> readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line"></div>
<div class="line"></div>
<div class="line">    <span class="comment">// Starts the audio streaming and plays it.</span></div>
<div class="line">    audio.play();</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">while</span> (audio.getStatus() == AudioFileStream::Playing)</div>
<div class="line">    {</div>
<div class="line">        sf::Lock lock(mutex);</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">if</span> (readyToUpdate)</div>
<div class="line">        {</div>
<div class="line">            <a class="code" href="fada__def_8h.htm#acf00bebc146611add2b43e97439d38e9">fada_Res</a> beat, bass, normal;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// libfada&#39;s analyzation algorithms use raw sample data in their calculations. This means that the results</span></div>
<div class="line">            <span class="comment">//   can vary among different sample data types. The normalizer is used to normalize results so they are</span></div>
<div class="line">            <span class="comment">//   uniform across different sample data types.</span></div>
<div class="line">            normal = <a class="code" href="fada_8h.htm#a9e1764292ba546383346c3d026529b24">fada_getnormalizer</a>(fada);</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Calculate &#39;beat&#39; and &#39;bass&#39;</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#ac178acf698d052b8a5349e07c1204ed6">fada_calcbeat</a>(fada, &amp;beat);</div>
<div class="line">            <a class="code" href="fada_8h.htm#af6612f2ad6240d4cfa46819db05d5fec">fada_calcbass</a>(fada, &amp;bass);</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Normalize the values.</span></div>
<div class="line">            beat /= normal;</div>
<div class="line">            bass /= normal;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Visualize beat/bass.</span></div>
<div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> beatCharCount = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(beat * 500);</div>
<div class="line">            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bassCharCount = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(bass * 75);</div>
<div class="line">            beatCharCount = (beatCharCount &gt; 50) ? 50 : beatCharCount;</div>
<div class="line">            bassCharCount = (bassCharCount &gt; 50) ? 50 : bassCharCount;</div>
<div class="line"></div>
<div class="line">            std::string beatStr(beatCharCount, <span class="charliteral">&#39;&gt;&#39;</span>);</div>
<div class="line">            std::string bassStr(bassCharCount, <span class="charliteral">&#39;]&#39;</span>);</div>
<div class="line"></div>
<div class="line">            printf(<span class="stringliteral">&quot;%s\n%s\n&quot;</span>, beatStr.c_str(), bassStr.c_str());</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">false</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">while</span> (audio.getPlayingOffset() &gt;= nextContinue)</div>
<div class="line">        {</div>
<div class="line">            nextContinue += continueInterval;</div>
<div class="line"></div>
<div class="line">            <span class="comment">// Advance to the next window of audio data.</span></div>
<div class="line">            <a class="code" href="fada_8h.htm#a57a3133da6f3c2d2bf49057d29435817">fada_continue</a>(fada, <a class="code" href="fada__def_8h.htm#a2201bcba05e79aee7b99abf2023d7475">FADA_NEXT_WINDOW</a>);</div>
<div class="line"></div>
<div class="line">            readyToUpdate = <span class="keyword">true</span>;</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        sf::sleep(sf::milliseconds(1));</div>
<div class="line">    }</div>
<div class="line"></div>
<div class="line">    <span class="comment">// Finished with the manager.</span></div>
<div class="line">    <a class="code" href="fada_8h.htm#afa62b224b1991b735d3a8e6b9dc2b0f1">fada_closemanager</a>(fada);</div>
<div class="line"></div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line"></div>
<div class="line">}</div>
</div><!-- fragment --><p>The output here is still very much the same, but the loading times are drastically improved, and very little memory is used in comparison to the first example. </p>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Dec 12 2013 18:55:50 for libfada by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>
